{"version":3,"sources":["Algorithm/bubbleSort.js","Algorithm/bogoSort.js","NavBar.js","SortingVis.js","App.js","reportWebVitals.js","index.js"],"names":["array","a","i","length","j","currentIndex","randomIndex","Math","floor","random","NavBar","props","Intervals","setHeight","arr","updateArr","beep","slice","sort","b","setSortStatus","useState","Speed","SetSpeed","Length","setLength","listRef","useRef","getListSize","newHeight","current","clientHeight","useEffect","window","addEventListener","Algorithm","setAlgorithm","x","matchMedia","matches","randomArray","min","max","push","ChangeDisplay","setDisplay","display","JSON","stringify","className","ref","href","onClick","style","onChange","event","target","value","Stop","clearInterval","stuff","temp","setInterval","BubbleSort","BogoSort","type","BortingVis","sortStatus","height","fullColour","largestNum","apply","map","ele","id","innerHeight","width","innerWidth","marginLeft","marginRight","marginTop","backgroundColor","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c877610.chunk.js","sourcesContent":["\r\n\r\nexport async function BubbleSort(array){\r\n    for(let i = 0; i < array.length -1; i++){\r\n        \r\n        for (let j = 0; j <array.length-1-i; j++){\r\n            if(array[j] > array[j+1]){\r\n                \r\n               array = [array[j], array[j+1]] = [array[j+1], array[j]]\r\n            }\r\n        }\r\n    }\r\n    return array\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n","export async function BogoSort(array){\r\n    let currentIndex = array.length,  randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (currentIndex !== 0) {\r\n\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n\r\n    // And swap it with the current element.\r\n    [array[currentIndex], array[randomIndex]] = [\r\n      array[randomIndex], array[currentIndex]];\r\n  }\r\n\r\n  return array;\r\n}\r\n","import React, {useState,  useEffect, useRef} from 'react'\r\n// import navbar idk \r\n\r\nimport \"./NavBar.css\"\r\nimport { BubbleSort } from './Algorithm/bubbleSort'\r\nimport { BogoSort } from './Algorithm/bogoSort'\r\n\r\n\r\n\r\n\r\nexport default function NavBar(props) {\r\n    var Intervals = 0\r\n    var setHeight = props.setHeight\r\n    var arr =props.arr\r\n    var updateArr = props.updateArr\r\n    var beep = arr.slice()\r\n    beep.sort((a,b) => a-b )\r\n    \r\n    var setSortStatus = props.setSortStatus\r\n    \r\n    const [Speed, SetSpeed] = useState(100)\r\n    const [Length, setLength] = useState(20)\r\n    \r\n    \r\n    const listRef = useRef();\r\n\r\n    \r\n  \r\n\r\n\r\n    //-----------------------------------------------------------------------------------//\r\n    \r\n    \r\n    \r\n  \r\n    // This function calculates width and height of the list\r\n    const getListSize = () => {\r\n      \r\n  \r\n      const newHeight = listRef.current.clientHeight;\r\n      setHeight(newHeight);\r\n    };\r\n  \r\n    // Get 'width' and 'height' after the initial render and every time the list changes\r\n    useEffect(() => {\r\n      getListSize();\r\n    });\r\n  \r\n    // Update 'width' and 'height' when the window resizes\r\n    useEffect(() => {\r\n      window.addEventListener(\"resize\", getListSize);\r\n    });\r\n\r\n//-------------------------------------------------------------------------------------------//\r\n\r\n    \r\n    \r\n    var Algorithm = props.Algorithm\r\n    var setAlgorithm = props.setAlgorithm\r\n    \r\n    \r\n    \r\n    \r\n    function isSmallScreen() {\r\n        return window.matchMedia(\"(max-width:560px)\").matches\r\n     }\r\n     \r\n     var x = isSmallScreen()\r\n     \r\n     if (x===true){\r\n        x = 'none' \r\n    }\r\n    \r\n \r\n//-----------------------------Produce Array-------------------------------------//\r\n    \r\n    function randomArray(){\r\n        var arr = []\r\n        \r\n        for (let i = 0; i < Length; i++){\r\n          \r\n          \r\n         arr.push(randomIntFromInterval(1, 1000))\r\n         \r\n          \r\n        }\r\n       updateArr(arr)\r\n        \r\n        \r\n        \r\n      }\r\n      \r\n      function randomIntFromInterval(min, max){\r\n        return Math.floor(Math.random() * (max - min + 1) + min)\r\n      }\r\n\r\n        \r\n      \r\n           \r\n        \r\n    \r\n        \r\n      \r\n  \r\n   \r\n\r\n   function ChangeDisplay() {\r\n       \r\n       if (display === 'none'){\r\n        setDisplay('block')\r\n       }\r\n       else{\r\n       setDisplay('none')\r\n       \r\n       }\r\n   }\r\n\r\n   \r\n   const [display, setDisplay] = useState(x)\r\n    \r\n   \r\n   \r\n   \r\n   \r\n  \r\n   if (JSON.stringify(arr) === JSON.stringify(beep)){\r\n       setSortStatus(true)\r\n       \r\n   }\r\n   else if(JSON.stringify(arr) !== JSON.stringify(beep)){\r\n       setSortStatus(false)\r\n       \r\n   }\r\n\r\n\r\n   function sort (){\r\n    ChangeDisplay()\r\n    \r\n   function Stop(){\r\n       //sortstatus does not work here, trust me!\r\n        if (JSON.stringify(arr) === JSON.stringify(beep)){\r\n            clearInterval(Intervals)\r\n            \r\n            if (x===true){\r\n            setDisplay('none')\r\n            }\r\n            else if (x===false){\r\n                setDisplay('block')\r\n                \r\n            }\r\n    }\r\n       }\r\n       //this function is needed so that the sorting actually breaks, idk what to call it tho\r\n       function stuff(){\r\n        var temp = arr.slice()\r\n        updateArr(temp)\r\n       }\r\n\r\n        \r\n\r\n\r\n       //will add more algorithms later on\r\n       if (Algorithm === 'Bubble Sort'){\r\n        Intervals = setInterval(bubbleSort, Speed)\r\n       }\r\n       if (Algorithm === 'Bogo Sort'){\r\n        \r\n        Intervals = setInterval(bogoSort, Speed)\r\n        \r\n       }\r\n       \r\n       \r\n     \r\n     \r\n    function bubbleSort (){\r\n       \r\n        BubbleSort(arr)\r\n        stuff()\r\n        Stop()\r\n   }\r\n   function bogoSort (){\r\n      BogoSort(arr)\r\n      stuff()\r\n      Stop()\r\n      \r\n       \r\n      \r\n\r\n       \r\n        \r\n       \r\n       \r\n   }\r\n   }\r\n   \r\n\r\n   function ChooseAlgo (event){\r\n       setAlgorithm(event.target.value)\r\n   }\r\n   \r\n   function ChangeSpeed (event){\r\n       SetSpeed(1000-(event.target.value))\r\n   }\r\n   \r\n   function ChangeLength(event){\r\n    setLength(event.target.value)\r\n    randomArray()\r\n}\r\n\r\n    \r\n\r\n    return (\r\n        \r\n       <div className=\"NavBar\">\r\n           <nav className=\"navBar\"  ref={listRef}>\r\n               <div className=\"Title\">Sorting Algorithm</div>\r\n                <a href=\"#\" className=\"Toggle\" onClick={ChangeDisplay}>\r\n                   <span className=\"Bar\"></span>\r\n                   <span className=\"Bar\"></span>\r\n                   <span className=\"Bar\"></span>\r\n                </a>\r\n                <div className=\"Inputs\" style={{display:display}}>\r\n                   <ul>\r\n                       <button onClick={randomArray}><li>Initialise array</li></button>\r\n                       <button><li>Algorithms:  \r\n                           <select onChange={ChooseAlgo}>\r\n                            <option value='Bubble Sort'>Bubble sort</option>\r\n                            <option value='Bogo Sort'>Bogo Sort</option>\r\n\r\n                           </select></li></button>\r\n                       <button onClick={sort}><li>Sort!</li></button>\r\n                       <button>\r\n                           <li>  \r\n                                <div>Array Length:</div><input onChange={ChangeLength} type='range' min='5' max='150'></input><br></br>\r\n                                <div>Sort Speed:</div><input onChange={ChangeSpeed} type='range' min='1' max='1000'></input>\r\n                                </li> </button>\r\n                   </ul>\r\n               </div>\r\n           </nav>\r\n           \r\n       </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './SoritngVis.css'\r\n\r\n\r\n\r\nexport default function BortingVis(props) {\r\n    var arr = props.arr\r\n    var sortStatus = props.sortStatus\r\n    var height = props.height\r\n    \r\n\r\n    var fullColour = 0\r\n    if (sortStatus === false){\r\n        fullColour = 'white'\r\n       \r\n    }\r\n    else {\r\n        fullColour = 'green'\r\n        \r\n    }\r\n\r\n    \r\n    \r\n    \r\n    const largestNum = Math.max.apply(null, arr)\r\n\r\n   \r\n    return (\r\n        <div className=\"arrayContainer\">\r\n            \r\n        <center>\r\n        {arr.map((ele,id)=>(\r\n            <div className=\"arrayElement\"\r\n            key={id}\r\n            style={{\r\n                height:`${(window.innerHeight - height - 45) *(ele /largestNum)}px`,\r\n                width:`${(((window.innerWidth-16)/arr.length)/2)}px`,\r\n                marginLeft :`${(((window.innerWidth-20)/arr.length)/5)}px`,\r\n                marginRight :`${(((window.innerWidth-20)/arr.length)/5)}px`,\r\n                \r\n                marginTop:`${(((window.innerWidth)/arr.length)/5)}px`,\r\n                backgroundColor:`${fullColour}`,\r\n                \r\n                \r\n            }}></div>\r\n        ))}\r\n        \r\n        </center>\r\n        \r\n    </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n","\nimport React, {useState} from \"react\";\nimport NavBar from \"./NavBar\"\nimport SortingVis from \"./SortingVis\"\n\n\n\n\n//chamge the random intiavl values later on\n\nfunction App() {\n\n  const [arr, updateArr] = useState([])\n  const [sortStatus, setSortStatus] = useState()\n  const [Algorithm, setAlgorithm] = useState('Bubble Sort')\n  const [height, setHeight] = useState();\n    \n   \n   \n  return (\n    <div className=\"container\">\n      <NavBar updateArr= {updateArr} \n              arr={arr} \n              sortStatus={sortStatus} \n              setSortStatus={setSortStatus}\n              Algorithm={Algorithm}\n              setAlgorithm={setAlgorithm}\n              height={height}\n              setHeight={setHeight}\n              />\n\n      <SortingVis updateArr={updateArr} \n                  arr={arr}  \n                  sortStatus={sortStatus} \n                  setSortStatus={setSortStatus} \n                  Algorithm={Algorithm}\n                  setAlgorithm={setAlgorithm}\n                  height={height}\n                  setHeight={setHeight}\n                  />    \n      \n    </div>\n  );\n\n}\n\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}